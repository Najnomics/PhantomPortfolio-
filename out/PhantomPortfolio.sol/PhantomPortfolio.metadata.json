{
  "compiler": {
    "version": "0.8.26+commit.8a97fa7a"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [
          {
            "internalType": "contract IPoolManager",
            "name": "_poolManager",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "constructor"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "HookNotImplemented"
      },
      {
        "inputs": [
          {
            "internalType": "uint8",
            "name": "got",
            "type": "uint8"
          },
          {
            "internalType": "uint8",
            "name": "expected",
            "type": "uint8"
          }
        ],
        "type": "error",
        "name": "InvalidEncryptedInput"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "InvalidParameters"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "NotManager"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "NotPoolManager"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "NotPortfolioOwner"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "PortfolioNotFound"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "RebalanceNotNeeded"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "ReentrancyGuardReentrantCall"
      },
      {
        "inputs": [
          {
            "internalType": "int32",
            "name": "value",
            "type": "int32"
          }
        ],
        "type": "error",
        "name": "SecurityZoneOutOfBounds"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "owner",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "address",
            "name": "tokenIn",
            "type": "address",
            "indexed": false
          },
          {
            "internalType": "address",
            "name": "tokenOut",
            "type": "address",
            "indexed": false
          },
          {
            "internalType": "euint128",
            "name": "amount",
            "type": "uint256",
            "indexed": false
          },
          {
            "internalType": "uint256",
            "name": "timestamp",
            "type": "uint256",
            "indexed": false
          }
        ],
        "type": "event",
        "name": "OrderExecuted",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "owner",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "uint256",
            "name": "portfolioId",
            "type": "uint256",
            "indexed": true
          },
          {
            "internalType": "uint256",
            "name": "timestamp",
            "type": "uint256",
            "indexed": false
          }
        ],
        "type": "event",
        "name": "PerformanceUpdated",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "owner",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "uint256",
            "name": "portfolioId",
            "type": "uint256",
            "indexed": true
          },
          {
            "internalType": "uint256",
            "name": "tokenCount",
            "type": "uint256",
            "indexed": false
          },
          {
            "internalType": "uint256",
            "name": "timestamp",
            "type": "uint256",
            "indexed": false
          }
        ],
        "type": "event",
        "name": "PhantomPortfolioCreated",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "owner",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "uint256",
            "name": "portfolioId",
            "type": "uint256",
            "indexed": true
          },
          {
            "internalType": "uint256",
            "name": "tradeCount",
            "type": "uint256",
            "indexed": false
          },
          {
            "internalType": "uint256",
            "name": "timestamp",
            "type": "uint256",
            "indexed": false
          }
        ],
        "type": "event",
        "name": "PortfolioRebalanced",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "owner",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "bytes32",
            "name": "orderId",
            "type": "bytes32",
            "indexed": true
          },
          {
            "internalType": "address",
            "name": "tokenIn",
            "type": "address",
            "indexed": false
          },
          {
            "internalType": "address",
            "name": "tokenOut",
            "type": "address",
            "indexed": false
          },
          {
            "internalType": "uint256",
            "name": "timestamp",
            "type": "uint256",
            "indexed": false
          }
        ],
        "type": "event",
        "name": "RebalanceOrderExecuted",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "sender",
            "type": "address"
          },
          {
            "internalType": "struct PoolKey",
            "name": "key",
            "type": "tuple",
            "components": [
              {
                "internalType": "Currency",
                "name": "currency0",
                "type": "address"
              },
              {
                "internalType": "Currency",
                "name": "currency1",
                "type": "address"
              },
              {
                "internalType": "uint24",
                "name": "fee",
                "type": "uint24"
              },
              {
                "internalType": "int24",
                "name": "tickSpacing",
                "type": "int24"
              },
              {
                "internalType": "contract IHooks",
                "name": "hooks",
                "type": "address"
              }
            ]
          },
          {
            "internalType": "struct ModifyLiquidityParams",
            "name": "params",
            "type": "tuple",
            "components": [
              {
                "internalType": "int24",
                "name": "tickLower",
                "type": "int24"
              },
              {
                "internalType": "int24",
                "name": "tickUpper",
                "type": "int24"
              },
              {
                "internalType": "int256",
                "name": "liquidityDelta",
                "type": "int256"
              },
              {
                "internalType": "bytes32",
                "name": "salt",
                "type": "bytes32"
              }
            ]
          },
          {
            "internalType": "BalanceDelta",
            "name": "delta",
            "type": "int256"
          },
          {
            "internalType": "BalanceDelta",
            "name": "feesAccrued",
            "type": "int256"
          },
          {
            "internalType": "bytes",
            "name": "hookData",
            "type": "bytes"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "afterAddLiquidity",
        "outputs": [
          {
            "internalType": "bytes4",
            "name": "",
            "type": "bytes4"
          },
          {
            "internalType": "BalanceDelta",
            "name": "",
            "type": "int256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "sender",
            "type": "address"
          },
          {
            "internalType": "struct PoolKey",
            "name": "key",
            "type": "tuple",
            "components": [
              {
                "internalType": "Currency",
                "name": "currency0",
                "type": "address"
              },
              {
                "internalType": "Currency",
                "name": "currency1",
                "type": "address"
              },
              {
                "internalType": "uint24",
                "name": "fee",
                "type": "uint24"
              },
              {
                "internalType": "int24",
                "name": "tickSpacing",
                "type": "int24"
              },
              {
                "internalType": "contract IHooks",
                "name": "hooks",
                "type": "address"
              }
            ]
          },
          {
            "internalType": "uint256",
            "name": "amount0",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "amount1",
            "type": "uint256"
          },
          {
            "internalType": "bytes",
            "name": "hookData",
            "type": "bytes"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "afterDonate",
        "outputs": [
          {
            "internalType": "bytes4",
            "name": "",
            "type": "bytes4"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "sender",
            "type": "address"
          },
          {
            "internalType": "struct PoolKey",
            "name": "key",
            "type": "tuple",
            "components": [
              {
                "internalType": "Currency",
                "name": "currency0",
                "type": "address"
              },
              {
                "internalType": "Currency",
                "name": "currency1",
                "type": "address"
              },
              {
                "internalType": "uint24",
                "name": "fee",
                "type": "uint24"
              },
              {
                "internalType": "int24",
                "name": "tickSpacing",
                "type": "int24"
              },
              {
                "internalType": "contract IHooks",
                "name": "hooks",
                "type": "address"
              }
            ]
          },
          {
            "internalType": "uint160",
            "name": "sqrtPriceX96",
            "type": "uint160"
          },
          {
            "internalType": "int24",
            "name": "tick",
            "type": "int24"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "afterInitialize",
        "outputs": [
          {
            "internalType": "bytes4",
            "name": "",
            "type": "bytes4"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "sender",
            "type": "address"
          },
          {
            "internalType": "struct PoolKey",
            "name": "key",
            "type": "tuple",
            "components": [
              {
                "internalType": "Currency",
                "name": "currency0",
                "type": "address"
              },
              {
                "internalType": "Currency",
                "name": "currency1",
                "type": "address"
              },
              {
                "internalType": "uint24",
                "name": "fee",
                "type": "uint24"
              },
              {
                "internalType": "int24",
                "name": "tickSpacing",
                "type": "int24"
              },
              {
                "internalType": "contract IHooks",
                "name": "hooks",
                "type": "address"
              }
            ]
          },
          {
            "internalType": "struct ModifyLiquidityParams",
            "name": "params",
            "type": "tuple",
            "components": [
              {
                "internalType": "int24",
                "name": "tickLower",
                "type": "int24"
              },
              {
                "internalType": "int24",
                "name": "tickUpper",
                "type": "int24"
              },
              {
                "internalType": "int256",
                "name": "liquidityDelta",
                "type": "int256"
              },
              {
                "internalType": "bytes32",
                "name": "salt",
                "type": "bytes32"
              }
            ]
          },
          {
            "internalType": "BalanceDelta",
            "name": "delta",
            "type": "int256"
          },
          {
            "internalType": "BalanceDelta",
            "name": "feesAccrued",
            "type": "int256"
          },
          {
            "internalType": "bytes",
            "name": "hookData",
            "type": "bytes"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "afterRemoveLiquidity",
        "outputs": [
          {
            "internalType": "bytes4",
            "name": "",
            "type": "bytes4"
          },
          {
            "internalType": "BalanceDelta",
            "name": "",
            "type": "int256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "sender",
            "type": "address"
          },
          {
            "internalType": "struct PoolKey",
            "name": "key",
            "type": "tuple",
            "components": [
              {
                "internalType": "Currency",
                "name": "currency0",
                "type": "address"
              },
              {
                "internalType": "Currency",
                "name": "currency1",
                "type": "address"
              },
              {
                "internalType": "uint24",
                "name": "fee",
                "type": "uint24"
              },
              {
                "internalType": "int24",
                "name": "tickSpacing",
                "type": "int24"
              },
              {
                "internalType": "contract IHooks",
                "name": "hooks",
                "type": "address"
              }
            ]
          },
          {
            "internalType": "struct SwapParams",
            "name": "params",
            "type": "tuple",
            "components": [
              {
                "internalType": "bool",
                "name": "zeroForOne",
                "type": "bool"
              },
              {
                "internalType": "int256",
                "name": "amountSpecified",
                "type": "int256"
              },
              {
                "internalType": "uint160",
                "name": "sqrtPriceLimitX96",
                "type": "uint160"
              }
            ]
          },
          {
            "internalType": "BalanceDelta",
            "name": "delta",
            "type": "int256"
          },
          {
            "internalType": "bytes",
            "name": "hookData",
            "type": "bytes"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "afterSwap",
        "outputs": [
          {
            "internalType": "bytes4",
            "name": "",
            "type": "bytes4"
          },
          {
            "internalType": "int128",
            "name": "",
            "type": "int128"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "sender",
            "type": "address"
          },
          {
            "internalType": "struct PoolKey",
            "name": "key",
            "type": "tuple",
            "components": [
              {
                "internalType": "Currency",
                "name": "currency0",
                "type": "address"
              },
              {
                "internalType": "Currency",
                "name": "currency1",
                "type": "address"
              },
              {
                "internalType": "uint24",
                "name": "fee",
                "type": "uint24"
              },
              {
                "internalType": "int24",
                "name": "tickSpacing",
                "type": "int24"
              },
              {
                "internalType": "contract IHooks",
                "name": "hooks",
                "type": "address"
              }
            ]
          },
          {
            "internalType": "struct ModifyLiquidityParams",
            "name": "params",
            "type": "tuple",
            "components": [
              {
                "internalType": "int24",
                "name": "tickLower",
                "type": "int24"
              },
              {
                "internalType": "int24",
                "name": "tickUpper",
                "type": "int24"
              },
              {
                "internalType": "int256",
                "name": "liquidityDelta",
                "type": "int256"
              },
              {
                "internalType": "bytes32",
                "name": "salt",
                "type": "bytes32"
              }
            ]
          },
          {
            "internalType": "bytes",
            "name": "hookData",
            "type": "bytes"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "beforeAddLiquidity",
        "outputs": [
          {
            "internalType": "bytes4",
            "name": "",
            "type": "bytes4"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "sender",
            "type": "address"
          },
          {
            "internalType": "struct PoolKey",
            "name": "key",
            "type": "tuple",
            "components": [
              {
                "internalType": "Currency",
                "name": "currency0",
                "type": "address"
              },
              {
                "internalType": "Currency",
                "name": "currency1",
                "type": "address"
              },
              {
                "internalType": "uint24",
                "name": "fee",
                "type": "uint24"
              },
              {
                "internalType": "int24",
                "name": "tickSpacing",
                "type": "int24"
              },
              {
                "internalType": "contract IHooks",
                "name": "hooks",
                "type": "address"
              }
            ]
          },
          {
            "internalType": "uint256",
            "name": "amount0",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "amount1",
            "type": "uint256"
          },
          {
            "internalType": "bytes",
            "name": "hookData",
            "type": "bytes"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "beforeDonate",
        "outputs": [
          {
            "internalType": "bytes4",
            "name": "",
            "type": "bytes4"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "sender",
            "type": "address"
          },
          {
            "internalType": "struct PoolKey",
            "name": "key",
            "type": "tuple",
            "components": [
              {
                "internalType": "Currency",
                "name": "currency0",
                "type": "address"
              },
              {
                "internalType": "Currency",
                "name": "currency1",
                "type": "address"
              },
              {
                "internalType": "uint24",
                "name": "fee",
                "type": "uint24"
              },
              {
                "internalType": "int24",
                "name": "tickSpacing",
                "type": "int24"
              },
              {
                "internalType": "contract IHooks",
                "name": "hooks",
                "type": "address"
              }
            ]
          },
          {
            "internalType": "uint160",
            "name": "sqrtPriceX96",
            "type": "uint160"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "beforeInitialize",
        "outputs": [
          {
            "internalType": "bytes4",
            "name": "",
            "type": "bytes4"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "sender",
            "type": "address"
          },
          {
            "internalType": "struct PoolKey",
            "name": "key",
            "type": "tuple",
            "components": [
              {
                "internalType": "Currency",
                "name": "currency0",
                "type": "address"
              },
              {
                "internalType": "Currency",
                "name": "currency1",
                "type": "address"
              },
              {
                "internalType": "uint24",
                "name": "fee",
                "type": "uint24"
              },
              {
                "internalType": "int24",
                "name": "tickSpacing",
                "type": "int24"
              },
              {
                "internalType": "contract IHooks",
                "name": "hooks",
                "type": "address"
              }
            ]
          },
          {
            "internalType": "struct ModifyLiquidityParams",
            "name": "params",
            "type": "tuple",
            "components": [
              {
                "internalType": "int24",
                "name": "tickLower",
                "type": "int24"
              },
              {
                "internalType": "int24",
                "name": "tickUpper",
                "type": "int24"
              },
              {
                "internalType": "int256",
                "name": "liquidityDelta",
                "type": "int256"
              },
              {
                "internalType": "bytes32",
                "name": "salt",
                "type": "bytes32"
              }
            ]
          },
          {
            "internalType": "bytes",
            "name": "hookData",
            "type": "bytes"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "beforeRemoveLiquidity",
        "outputs": [
          {
            "internalType": "bytes4",
            "name": "",
            "type": "bytes4"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "sender",
            "type": "address"
          },
          {
            "internalType": "struct PoolKey",
            "name": "key",
            "type": "tuple",
            "components": [
              {
                "internalType": "Currency",
                "name": "currency0",
                "type": "address"
              },
              {
                "internalType": "Currency",
                "name": "currency1",
                "type": "address"
              },
              {
                "internalType": "uint24",
                "name": "fee",
                "type": "uint24"
              },
              {
                "internalType": "int24",
                "name": "tickSpacing",
                "type": "int24"
              },
              {
                "internalType": "contract IHooks",
                "name": "hooks",
                "type": "address"
              }
            ]
          },
          {
            "internalType": "struct SwapParams",
            "name": "params",
            "type": "tuple",
            "components": [
              {
                "internalType": "bool",
                "name": "zeroForOne",
                "type": "bool"
              },
              {
                "internalType": "int256",
                "name": "amountSpecified",
                "type": "int256"
              },
              {
                "internalType": "uint160",
                "name": "sqrtPriceLimitX96",
                "type": "uint160"
              }
            ]
          },
          {
            "internalType": "bytes",
            "name": "hookData",
            "type": "bytes"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "beforeSwap",
        "outputs": [
          {
            "internalType": "bytes4",
            "name": "",
            "type": "bytes4"
          },
          {
            "internalType": "BeforeSwapDelta",
            "name": "",
            "type": "int256"
          },
          {
            "internalType": "uint24",
            "name": "",
            "type": "uint24"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "pure",
        "type": "function",
        "name": "getHookPermissions",
        "outputs": [
          {
            "internalType": "struct Hooks.Permissions",
            "name": "",
            "type": "tuple",
            "components": [
              {
                "internalType": "bool",
                "name": "beforeInitialize",
                "type": "bool"
              },
              {
                "internalType": "bool",
                "name": "afterInitialize",
                "type": "bool"
              },
              {
                "internalType": "bool",
                "name": "beforeAddLiquidity",
                "type": "bool"
              },
              {
                "internalType": "bool",
                "name": "afterAddLiquidity",
                "type": "bool"
              },
              {
                "internalType": "bool",
                "name": "beforeRemoveLiquidity",
                "type": "bool"
              },
              {
                "internalType": "bool",
                "name": "afterRemoveLiquidity",
                "type": "bool"
              },
              {
                "internalType": "bool",
                "name": "beforeSwap",
                "type": "bool"
              },
              {
                "internalType": "bool",
                "name": "afterSwap",
                "type": "bool"
              },
              {
                "internalType": "bool",
                "name": "beforeDonate",
                "type": "bool"
              },
              {
                "internalType": "bool",
                "name": "afterDonate",
                "type": "bool"
              },
              {
                "internalType": "bool",
                "name": "beforeSwapReturnDelta",
                "type": "bool"
              },
              {
                "internalType": "bool",
                "name": "afterSwapReturnDelta",
                "type": "bool"
              },
              {
                "internalType": "bool",
                "name": "afterAddLiquidityReturnDelta",
                "type": "bool"
              },
              {
                "internalType": "bool",
                "name": "afterRemoveLiquidityReturnDelta",
                "type": "bool"
              }
            ]
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "performanceMetrics",
        "outputs": [
          {
            "internalType": "euint128",
            "name": "totalReturn",
            "type": "uint256"
          },
          {
            "internalType": "euint128",
            "name": "benchmarkReturn",
            "type": "uint256"
          },
          {
            "internalType": "euint128",
            "name": "activeReturn",
            "type": "uint256"
          },
          {
            "internalType": "euint64",
            "name": "measurementPeriod",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "PoolId",
            "name": "",
            "type": "bytes32"
          },
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "poolActiveAuctions",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "PoolId",
            "name": "",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "poolAuctionCount",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "poolManager",
        "outputs": [
          {
            "internalType": "contract IPoolManager",
            "name": "",
            "type": "address"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "portfolioCounter",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "portfolioPools",
        "outputs": [
          {
            "internalType": "Currency",
            "name": "currency0",
            "type": "address"
          },
          {
            "internalType": "Currency",
            "name": "currency1",
            "type": "address"
          },
          {
            "internalType": "uint24",
            "name": "fee",
            "type": "uint24"
          },
          {
            "internalType": "int24",
            "name": "tickSpacing",
            "type": "int24"
          },
          {
            "internalType": "contract IHooks",
            "name": "hooks",
            "type": "address"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "portfolios",
        "outputs": [
          {
            "internalType": "euint64",
            "name": "rebalanceFrequency",
            "type": "uint256"
          },
          {
            "internalType": "euint128",
            "name": "totalValue",
            "type": "uint256"
          },
          {
            "internalType": "euint32",
            "name": "toleranceBand",
            "type": "uint256"
          },
          {
            "internalType": "ebool",
            "name": "autoRebalanceEnabled",
            "type": "uint256"
          },
          {
            "internalType": "euint64",
            "name": "lastRebalance",
            "type": "uint256"
          },
          {
            "internalType": "bool",
            "name": "isActive",
            "type": "bool"
          },
          {
            "internalType": "uint256",
            "name": "lastRebalanceTime",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "rebalanceFrequencySeconds",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          },
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "rebalanceOrders",
        "outputs": [
          {
            "internalType": "address",
            "name": "tokenIn",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "tokenOut",
            "type": "address"
          },
          {
            "internalType": "euint128",
            "name": "amountIn",
            "type": "uint256"
          },
          {
            "internalType": "euint128",
            "name": "minAmountOut",
            "type": "uint256"
          },
          {
            "internalType": "euint64",
            "name": "executionWindow",
            "type": "uint256"
          },
          {
            "internalType": "euint32",
            "name": "priority",
            "type": "uint256"
          },
          {
            "internalType": "ebool",
            "name": "isActive",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address[]",
            "name": "tokens",
            "type": "address[]"
          },
          {
            "internalType": "struct InEuint128[]",
            "name": "targetAllocations",
            "type": "tuple[]",
            "components": [
              {
                "internalType": "uint256",
                "name": "ctHash",
                "type": "uint256"
              },
              {
                "internalType": "uint8",
                "name": "securityZone",
                "type": "uint8"
              },
              {
                "internalType": "uint8",
                "name": "utype",
                "type": "uint8"
              },
              {
                "internalType": "bytes",
                "name": "signature",
                "type": "bytes"
              }
            ]
          },
          {
            "internalType": "struct InEuint128[]",
            "name": "tradingLimits",
            "type": "tuple[]",
            "components": [
              {
                "internalType": "uint256",
                "name": "ctHash",
                "type": "uint256"
              },
              {
                "internalType": "uint8",
                "name": "securityZone",
                "type": "uint8"
              },
              {
                "internalType": "uint8",
                "name": "utype",
                "type": "uint8"
              },
              {
                "internalType": "bytes",
                "name": "signature",
                "type": "bytes"
              }
            ]
          },
          {
            "internalType": "struct InEuint64",
            "name": "rebalanceFrequency",
            "type": "tuple",
            "components": [
              {
                "internalType": "uint256",
                "name": "ctHash",
                "type": "uint256"
              },
              {
                "internalType": "uint8",
                "name": "securityZone",
                "type": "uint8"
              },
              {
                "internalType": "uint8",
                "name": "utype",
                "type": "uint8"
              },
              {
                "internalType": "bytes",
                "name": "signature",
                "type": "bytes"
              }
            ]
          },
          {
            "internalType": "struct InEuint32",
            "name": "toleranceBand",
            "type": "tuple",
            "components": [
              {
                "internalType": "uint256",
                "name": "ctHash",
                "type": "uint256"
              },
              {
                "internalType": "uint8",
                "name": "securityZone",
                "type": "uint8"
              },
              {
                "internalType": "uint8",
                "name": "utype",
                "type": "uint8"
              },
              {
                "internalType": "bytes",
                "name": "signature",
                "type": "bytes"
              }
            ]
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "setupPhantomPortfolio"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "portfolioOwner",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "triggerRebalance"
      }
    ],
    "devdoc": {
      "kind": "dev",
      "methods": {
        "afterAddLiquidity(address,(address,address,uint24,int24,address),(int24,int24,int256,bytes32),int256,int256,bytes)": {
          "params": {
            "delta": "The caller's balance delta after adding liquidity; the sum of principal delta, fees accrued, and hook delta",
            "feesAccrued": "The fees accrued since the last time fees were collected from this position",
            "hookData": "Arbitrary data handed into the PoolManager by the liquidity provider to be passed on to the hook",
            "key": "The key for the pool",
            "params": "The parameters for adding liquidity",
            "sender": "The initial msg.sender for the add liquidity call"
          },
          "returns": {
            "_0": "bytes4 The function selector for the hook",
            "_1": "BalanceDelta The hook's delta in token0 and token1. Positive: the hook is owed/took currency, negative: the hook owes/sent currency"
          }
        },
        "afterDonate(address,(address,address,uint24,int24,address),uint256,uint256,bytes)": {
          "params": {
            "amount0": "The amount of token0 being donated",
            "amount1": "The amount of token1 being donated",
            "hookData": "Arbitrary data handed into the PoolManager by the donor to be be passed on to the hook",
            "key": "The key for the pool",
            "sender": "The initial msg.sender for the donate call"
          },
          "returns": {
            "_0": "bytes4 The function selector for the hook"
          }
        },
        "afterInitialize(address,(address,address,uint24,int24,address),uint160,int24)": {
          "params": {
            "key": "The key for the pool being initialized",
            "sender": "The initial msg.sender for the initialize call",
            "sqrtPriceX96": "The sqrt(price) of the pool as a Q64.96",
            "tick": "The current tick after the state of a pool is initialized"
          },
          "returns": {
            "_0": "bytes4 The function selector for the hook"
          }
        },
        "afterRemoveLiquidity(address,(address,address,uint24,int24,address),(int24,int24,int256,bytes32),int256,int256,bytes)": {
          "params": {
            "delta": "The caller's balance delta after removing liquidity; the sum of principal delta, fees accrued, and hook delta",
            "feesAccrued": "The fees accrued since the last time fees were collected from this position",
            "hookData": "Arbitrary data handed into the PoolManager by the liquidity provider to be be passed on to the hook",
            "key": "The key for the pool",
            "params": "The parameters for removing liquidity",
            "sender": "The initial msg.sender for the remove liquidity call"
          },
          "returns": {
            "_0": "bytes4 The function selector for the hook",
            "_1": "BalanceDelta The hook's delta in token0 and token1. Positive: the hook is owed/took currency, negative: the hook owes/sent currency"
          }
        },
        "afterSwap(address,(address,address,uint24,int24,address),(bool,int256,uint160),int256,bytes)": {
          "params": {
            "delta": "The amount owed to the caller (positive) or owed to the pool (negative)",
            "hookData": "Arbitrary data handed into the PoolManager by the swapper to be be passed on to the hook",
            "key": "The key for the pool",
            "params": "The parameters for the swap",
            "sender": "The initial msg.sender for the swap call"
          },
          "returns": {
            "_0": "bytes4 The function selector for the hook",
            "_1": "int128 The hook's delta in unspecified currency. Positive: the hook is owed/took currency, negative: the hook owes/sent currency"
          }
        },
        "beforeAddLiquidity(address,(address,address,uint24,int24,address),(int24,int24,int256,bytes32),bytes)": {
          "params": {
            "hookData": "Arbitrary data handed into the PoolManager by the liquidity provider to be passed on to the hook",
            "key": "The key for the pool",
            "params": "The parameters for adding liquidity",
            "sender": "The initial msg.sender for the add liquidity call"
          },
          "returns": {
            "_0": "bytes4 The function selector for the hook"
          }
        },
        "beforeDonate(address,(address,address,uint24,int24,address),uint256,uint256,bytes)": {
          "params": {
            "amount0": "The amount of token0 being donated",
            "amount1": "The amount of token1 being donated",
            "hookData": "Arbitrary data handed into the PoolManager by the donor to be be passed on to the hook",
            "key": "The key for the pool",
            "sender": "The initial msg.sender for the donate call"
          },
          "returns": {
            "_0": "bytes4 The function selector for the hook"
          }
        },
        "beforeInitialize(address,(address,address,uint24,int24,address),uint160)": {
          "params": {
            "key": "The key for the pool being initialized",
            "sender": "The initial msg.sender for the initialize call",
            "sqrtPriceX96": "The sqrt(price) of the pool as a Q64.96"
          },
          "returns": {
            "_0": "bytes4 The function selector for the hook"
          }
        },
        "beforeRemoveLiquidity(address,(address,address,uint24,int24,address),(int24,int24,int256,bytes32),bytes)": {
          "params": {
            "hookData": "Arbitrary data handed into the PoolManager by the liquidity provider to be be passed on to the hook",
            "key": "The key for the pool",
            "params": "The parameters for removing liquidity",
            "sender": "The initial msg.sender for the remove liquidity call"
          },
          "returns": {
            "_0": "bytes4 The function selector for the hook"
          }
        },
        "beforeSwap(address,(address,address,uint24,int24,address),(bool,int256,uint160),bytes)": {
          "params": {
            "hookData": "Arbitrary data handed into the PoolManager by the swapper to be be passed on to the hook",
            "key": "The key for the pool",
            "params": "The parameters for the swap",
            "sender": "The initial msg.sender for the swap call"
          },
          "returns": {
            "_0": "bytes4 The function selector for the hook",
            "_1": "BeforeSwapDelta The hook's delta in specified and unspecified currencies. Positive: the hook is owed/took currency, negative: the hook owes/sent currency",
            "_2": "uint24 Optionally override the lp fee, only used if three conditions are met: 1. the Pool has a dynamic fee, 2. the value's 2nd highest bit is set (23rd bit, 0x400000), and 3. the value is less than or equal to the maximum fee (1 million)"
          }
        },
        "getHookPermissions()": {
          "returns": {
            "_0": "flags Hook permission flags"
          }
        },
        "setupPhantomPortfolio(address[],(uint256,uint8,uint8,bytes)[],(uint256,uint8,uint8,bytes)[],(uint256,uint8,uint8,bytes),(uint256,uint8,uint8,bytes))": {
          "params": {
            "rebalanceFrequency": "Encrypted rebalancing frequency",
            "targetAllocations": "Encrypted target allocation percentages",
            "tokens": "Array of token addresses",
            "toleranceBand": "Encrypted tolerance threshold",
            "tradingLimits": "Encrypted maximum trade sizes"
          }
        },
        "triggerRebalance(address)": {
          "params": {
            "portfolioOwner": "Address of the portfolio owner"
          }
        }
      },
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "afterAddLiquidity(address,(address,address,uint24,int24,address),(int24,int24,int256,bytes32),int256,int256,bytes)": {
          "notice": "The hook called after liquidity is added"
        },
        "afterDonate(address,(address,address,uint24,int24,address),uint256,uint256,bytes)": {
          "notice": "The hook called after donate"
        },
        "afterInitialize(address,(address,address,uint24,int24,address),uint160,int24)": {
          "notice": "The hook called after the state of a pool is initialized"
        },
        "afterRemoveLiquidity(address,(address,address,uint24,int24,address),(int24,int24,int256,bytes32),int256,int256,bytes)": {
          "notice": "The hook called after liquidity is removed"
        },
        "afterSwap(address,(address,address,uint24,int24,address),(bool,int256,uint160),int256,bytes)": {
          "notice": "The hook called after a swap"
        },
        "beforeAddLiquidity(address,(address,address,uint24,int24,address),(int24,int24,int256,bytes32),bytes)": {
          "notice": "The hook called before liquidity is added"
        },
        "beforeDonate(address,(address,address,uint24,int24,address),uint256,uint256,bytes)": {
          "notice": "The hook called before donate"
        },
        "beforeInitialize(address,(address,address,uint24,int24,address),uint160)": {
          "notice": "The hook called before the state of a pool is initialized"
        },
        "beforeRemoveLiquidity(address,(address,address,uint24,int24,address),(int24,int24,int256,bytes32),bytes)": {
          "notice": "The hook called before liquidity is removed"
        },
        "beforeSwap(address,(address,address,uint24,int24,address),(bool,int256,uint160),bytes)": {
          "notice": "The hook called before a swap"
        },
        "getHookPermissions()": {
          "notice": "Get hook permissions for Uniswap v4"
        },
        "poolManager()": {
          "notice": "The Uniswap v4 PoolManager contract"
        },
        "setupPhantomPortfolio(address[],(uint256,uint8,uint8,bytes)[],(uint256,uint8,uint8,bytes)[],(uint256,uint8,uint8,bytes),(uint256,uint8,uint8,bytes))": {
          "notice": "Create a new phantom portfolio with encrypted parameters"
        },
        "triggerRebalance(address)": {
          "notice": "Trigger portfolio rebalancing"
        }
      },
      "version": 1
    }
  },
  "settings": {
    "remappings": [
      "@fhenixprotocol/cofhe-contracts/=node_modules/@fhenixprotocol/cofhe-contracts/",
      "@fhenixprotocol/cofhe-mock-contracts/=node_modules/@fhenixprotocol/cofhe-mock-contracts/",
      "@openzeppelin/contracts-upgradeable/=node_modules/@openzeppelin/contracts-upgradeable/",
      "@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/",
      "@uniswap/v4-core/=node_modules/@uniswap/v4-core/",
      "ds-test/=node_modules/@uniswap/v4-core/lib/solmate/lib/ds-test/",
      "erc4626-tests/=node_modules/@uniswap/v4-core/lib/openzeppelin-contracts/lib/erc4626-tests/",
      "forge-gas-snapshot/=node_modules/@uniswap/v4-periphery/lib/permit2/lib/forge-gas-snapshot/",
      "forge-std/=node_modules/forge-std/src/",
      "hardhat/=node_modules/hardhat/",
      "openzeppelin-contracts/=node_modules/@uniswap/v4-core/lib/openzeppelin-contracts/",
      "permit2/=node_modules/@uniswap/v4-periphery/lib/permit2/",
      "solmate/=node_modules/@uniswap/v4-core/lib/solmate/",
      "v4-core/=node_modules/@uniswap/v4-periphery/lib/v4-core/",
      "v4-periphery/=node_modules/@uniswap/v4-periphery/"
    ],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "metadata": {
      "bytecodeHash": "ipfs"
    },
    "compilationTarget": {
      "src/PhantomPortfolio.sol": "PhantomPortfolio"
    },
    "evmVersion": "cancun",
    "libraries": {},
    "viaIR": true
  },
  "sources": {
    "node_modules/@fhenixprotocol/cofhe-contracts/FHE.sol": {
      "keccak256": "0x1ef83b66db01d3252557ae8b22553920966b864e9de79134039a80368eaae573",
      "urls": [
        "bzz-raw://5ceadf3ed2378689c9b806b87fa56ce2a8774ecf693678150bcd558fb71b5be7",
        "dweb:/ipfs/QmNeW41QYyYnCYephhamCkE1aem3HVTHxpao7JbA2ABTjs"
      ],
      "license": "BSD-3-Clause-Clear"
    },
    "node_modules/@fhenixprotocol/cofhe-contracts/ICofhe.sol": {
      "keccak256": "0x4f1bb532cd152e124638f5957ee43848d82a34df1c540c5dbf99ea72359e2db3",
      "urls": [
        "bzz-raw://260aa7d6c664aa4c5b7f6760de4de6c206a17a5fcde784c171459e9bd0850696",
        "dweb:/ipfs/QmQKqbPJvR4ced1SJGzCtgohEbzi7oRgHBqNDLLvxPVKvJ"
      ],
      "license": "UNLICENSED"
    },
    "node_modules/@openzeppelin/contracts/interfaces/IERC1363.sol": {
      "keccak256": "0xd5ea07362ab630a6a3dee4285a74cf2377044ca2e4be472755ad64d7c5d4b69d",
      "urls": [
        "bzz-raw://da5e832b40fc5c3145d3781e2e5fa60ac2052c9d08af7e300dc8ab80c4343100",
        "dweb:/ipfs/QmTzf7N5ZUdh5raqtzbM11yexiUoLC9z3Ws632MCuycq1d"
      ],
      "license": "MIT"
    },
    "node_modules/@openzeppelin/contracts/interfaces/IERC165.sol": {
      "keccak256": "0x0afcb7e740d1537b252cb2676f600465ce6938398569f09ba1b9ca240dde2dfc",
      "urls": [
        "bzz-raw://1c299900ac4ec268d4570ecef0d697a3013cd11a6eb74e295ee3fbc945056037",
        "dweb:/ipfs/Qmab9owJoxcA7vJT5XNayCMaUR1qxqj1NDzzisduwaJMcZ"
      ],
      "license": "MIT"
    },
    "node_modules/@openzeppelin/contracts/interfaces/IERC20.sol": {
      "keccak256": "0x1a6221315ce0307746c2c4827c125d821ee796c74a676787762f4778671d4f44",
      "urls": [
        "bzz-raw://1bb2332a7ee26dd0b0de9b7fe266749f54820c99ab6a3bcb6f7e6b751d47ee2d",
        "dweb:/ipfs/QmcRWpaBeCYkhy68PR3B4AgD7asuQk7PwkWxrvJbZcikLF"
      ],
      "license": "MIT"
    },
    "node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "keccak256": "0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2",
      "urls": [
        "bzz-raw://5282825a626cfe924e504274b864a652b0023591fa66f06a067b25b51ba9b303",
        "dweb:/ipfs/QmeCfPykghhMc81VJTrHTC7sF6CRvaA1FXVq2pJhwYp1dV"
      ],
      "license": "MIT"
    },
    "node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "keccak256": "0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5",
      "urls": [
        "bzz-raw://8150ceb4ac947e8a442b2a9c017e01e880b2be2dd958f1fa9bc405f4c5a86508",
        "dweb:/ipfs/QmbcBmFX66AY6Kbhnd5gx7zpkgqnUafo43XnmayAM7zVdB"
      ],
      "license": "MIT"
    },
    "node_modules/@openzeppelin/contracts/utils/Panic.sol": {
      "keccak256": "0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a",
      "urls": [
        "bzz-raw://c6a5ff4f9fd8649b7ee20800b7fa387d3465bd77cf20c2d1068cd5c98e1ed57a",
        "dweb:/ipfs/QmVSaVJf9FXFhdYEYeCEfjMVHrxDh5qL4CGkxdMWpQCrqG"
      ],
      "license": "MIT"
    },
    "node_modules/@openzeppelin/contracts/utils/ReentrancyGuardTransient.sol": {
      "keccak256": "0xe56ff5015046505f81f9d62671a784e933dd099db4c3a8fa8de598f20af2c5a3",
      "urls": [
        "bzz-raw://355863359b4a250f7016836ef9a9672578e898503896f70a0d42b80141586f3e",
        "dweb:/ipfs/QmXXzvoMSFNQf8nRbcyRap5qzcbekWuzbXDY5C8f68JiG3"
      ],
      "license": "MIT"
    },
    "node_modules/@openzeppelin/contracts/utils/Strings.sol": {
      "keccak256": "0xad148d59f05165f9217d0a9e1ac8f772abb02ea6aaad8a756315c532bf79f9f4",
      "urls": [
        "bzz-raw://15e3599867c2182f5831e9268b274b2ef2047825837df6b4d81c9e89254b093e",
        "dweb:/ipfs/QmZbL7XAYr5RmaNaooPgZRmcDXaudfsYQfYD9y5iAECvpS"
      ],
      "license": "MIT"
    },
    "node_modules/@openzeppelin/contracts/utils/TransientSlot.sol": {
      "keccak256": "0xac673fa1e374d9e6107504af363333e3e5f6344d2e83faf57d9bfd41d77cc946",
      "urls": [
        "bzz-raw://5982478dbbb218e9dd5a6e83f5c0e8d1654ddf20178484b43ef21dd2246809de",
        "dweb:/ipfs/QmaB1hS68n2kG8vTbt7EPEzmrGhkUbfiFyykGGLsAr9X22"
      ],
      "license": "MIT"
    },
    "node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "keccak256": "0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c",
      "urls": [
        "bzz-raw://971f954442df5c2ef5b5ebf1eb245d7105d9fbacc7386ee5c796df1d45b21617",
        "dweb:/ipfs/QmadRjHbkicwqwwh61raUEapaVEtaLMcYbQZWs9gUkgj3u"
      ],
      "license": "MIT"
    },
    "node_modules/@openzeppelin/contracts/utils/math/Math.sol": {
      "keccak256": "0x1225214420c83ebcca88f2ae2b50f053aaa7df7bd684c3e878d334627f2edfc6",
      "urls": [
        "bzz-raw://6c5fab4970634f9ab9a620983dc1c8a30153981a0b1a521666e269d0a11399d3",
        "dweb:/ipfs/QmVRnBC575MESGkEHndjujtR7qub2FzU9RWy9eKLp4hPZB"
      ],
      "license": "MIT"
    },
    "node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol": {
      "keccak256": "0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54",
      "urls": [
        "bzz-raw://b1d578337048cad08c1c03041cca5978eff5428aa130c781b271ad9e5566e1f8",
        "dweb:/ipfs/QmPFKL2r9CBsMwmUqqdcFPfHZB2qcs9g1HDrPxzWSxomvy"
      ],
      "license": "MIT"
    },
    "node_modules/@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "keccak256": "0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3",
      "urls": [
        "bzz-raw://db5fbb3dddd8b7047465b62575d96231ba8a2774d37fb4737fbf23340fabbb03",
        "dweb:/ipfs/QmVUSvooZKEdEdap619tcJjTLcAuH6QBdZqAzWwnAXZAWJ"
      ],
      "license": "MIT"
    },
    "node_modules/@uniswap/v4-core/src/interfaces/IExtsload.sol": {
      "keccak256": "0x80b53ca4907d6f0088c3b931f2b72cad1dc4615a95094d96bd0fb8dff8d5ba43",
      "urls": [
        "bzz-raw://375c69148622aab7a3537d5fd37d373a8e9731022c8d87bdaee46233b0a99fe1",
        "dweb:/ipfs/QmXFjdoYRxsA5B1kyuxEXgNf3FBoL1zPvy26Qy8EtpdFRN"
      ],
      "license": "MIT"
    },
    "node_modules/@uniswap/v4-core/src/interfaces/IExttload.sol": {
      "keccak256": "0xc6b68283ebd8d1c789df536756726eed51c589134bb20821b236a0d22a135937",
      "urls": [
        "bzz-raw://294394f72dfc219689209f4130d85601dfd0d63c8d47578050d312db70f9b6c8",
        "dweb:/ipfs/QmTDMQ3oxCGHgEBU48a3Lp4S1rRjc8vVCxkhE5ZNej1bsY"
      ],
      "license": "MIT"
    },
    "node_modules/@uniswap/v4-core/src/interfaces/IHooks.sol": {
      "keccak256": "0xc131ffa2d04c10a012fe715fe2c115811526b7ea34285cf0a04ce7ce8320da8d",
      "urls": [
        "bzz-raw://3b212358897db5d99c21244d88f97b2e788527552cb430629b472a8cc6289aec",
        "dweb:/ipfs/QmQtwV4dDe2RYk2ErLpaAX7U82jWh1L6Lw2HRuKDvBi84G"
      ],
      "license": "MIT"
    },
    "node_modules/@uniswap/v4-core/src/interfaces/IPoolManager.sol": {
      "keccak256": "0xbdab3544da3d32dfdf7457baa94e17d5a3012952428559e013ffac45d067038e",
      "urls": [
        "bzz-raw://ce95ff864468e37c76adf71df061d4f3d6f3a5ec1f9bc3aea090463bc72798f4",
        "dweb:/ipfs/QmSbWh1pLbz51yQF4HEu5NRhr8XVv9JYGEw1hq1HudAnCi"
      ],
      "license": "MIT"
    },
    "node_modules/@uniswap/v4-core/src/interfaces/IProtocolFees.sol": {
      "keccak256": "0x32a666e588a2f66334430357bb1e2424fe7eebeb98a3364b1dd16eb6ccca9848",
      "urls": [
        "bzz-raw://85751d302125881f72e5f8af051c2d5d9b1f606ebaea8ca7d04fccdd27cc252d",
        "dweb:/ipfs/QmeRwomeh9NWm6A6fgNA4KZPQZHPpdKsPQyYsHSFmvud7J"
      ],
      "license": "MIT"
    },
    "node_modules/@uniswap/v4-core/src/interfaces/external/IERC20Minimal.sol": {
      "keccak256": "0xeccadf1bf69ba2eb51f2fe4fa511bc7bb05bbd6b9f9a3cb8e5d83d9582613e0f",
      "urls": [
        "bzz-raw://118757369892687b99ef46ce28d6861f62c098285bd7687a4f17f7e44e5f81de",
        "dweb:/ipfs/QmUxqbYqQtcEwwFbb9e6BBMePEaSgN8C45v6RKubD4ib8d"
      ],
      "license": "MIT"
    },
    "node_modules/@uniswap/v4-core/src/interfaces/external/IERC6909Claims.sol": {
      "keccak256": "0xa586f345739e52b0488a0fe40b6e375cce67fdd25758408b0efcb5133ad96a48",
      "urls": [
        "bzz-raw://e8c557b7e52abdbbd82e415a1acc27921446a7fd090b7d4877e52be72619547f",
        "dweb:/ipfs/QmXE2KNPbXmGX8BQF3ei6zhzRTnhoTQg39XmqMnkhbr6QK"
      ],
      "license": "MIT"
    },
    "node_modules/@uniswap/v4-core/src/libraries/CustomRevert.sol": {
      "keccak256": "0x111ed3031b6990c80a93ae35dde6b6ac0b7e6af471388fdd7461e91edda9b7de",
      "urls": [
        "bzz-raw://c9ea883c98d6ae1829160d0977bb5195761cfd5bc81692d0a941f45717f594cd",
        "dweb:/ipfs/QmZPwxzaeMNv536wzrAMrMswu7vMHuqPVpjcqL3YvCMoxt"
      ],
      "license": "MIT"
    },
    "node_modules/@uniswap/v4-core/src/libraries/Hooks.sol": {
      "keccak256": "0xd679b4b2d429689bc44f136050ebc958fb2d7d0d3a3c7b3e48c08ab4fba09aaa",
      "urls": [
        "bzz-raw://287190cb72840e5eb63cc7a8a1d0b9150af17d8e4ea0323f47c7e7928f2033cb",
        "dweb:/ipfs/QmVfqWBnAQM2jUcuREDdvjcP21gNuLU35CoL3NG5CEhNcx"
      ],
      "license": "MIT"
    },
    "node_modules/@uniswap/v4-core/src/libraries/LPFeeLibrary.sol": {
      "keccak256": "0xbf6914e01014e7c1044111feb7df7a3d96bb503b3da827ad8464b1955580d13b",
      "urls": [
        "bzz-raw://33823c20a91882c9aacdcbb02f0558c05209f4d5954aa6dd4fa17c95664db475",
        "dweb:/ipfs/QmR7owkFgpfztpp1QUg3ut3nw9iPVQqLGP4hzgmZtRUQ2J"
      ],
      "license": "MIT"
    },
    "node_modules/@uniswap/v4-core/src/libraries/ParseBytes.sol": {
      "keccak256": "0x7533b13f53ee2c2c55500100b22ffd6e37e7523c27874edc98663d53a8672b15",
      "urls": [
        "bzz-raw://82449058634fde28a085f3c59a6a5f412550c02181590593fd84c3e8b329aa17",
        "dweb:/ipfs/Qmev4E9Au6SsE4wsArChCwfg94KhHc5gYsEsZUnjF5sRLa"
      ],
      "license": "MIT"
    },
    "node_modules/@uniswap/v4-core/src/libraries/SafeCast.sol": {
      "keccak256": "0x42c4a24f996a14d358be397b71f7ec9d7daf666aaec78002c63315a6ee67aa86",
      "urls": [
        "bzz-raw://c3db86e2ba3679105fc32edec656c70282e1fede6cab11217702443f6c26fa59",
        "dweb:/ipfs/QmX4yaaSPdKQzYNRsezjTvZKsubzS8JRTEGFD3fPpTTCcj"
      ],
      "license": "MIT"
    },
    "node_modules/@uniswap/v4-core/src/types/BalanceDelta.sol": {
      "keccak256": "0xa719c8fe51e0a9524280178f19f6851bcc3b3b60e73618f3d60905d35ae5569f",
      "urls": [
        "bzz-raw://7436928dc9de35c6c7c5c636cb51adaf295cfd590da83b19a004ae33cbec9ef9",
        "dweb:/ipfs/QmRJ9yZkUpzk4433GX3LgVVL8jwpbSYSUwXcucKisf3v4H"
      ],
      "license": "MIT"
    },
    "node_modules/@uniswap/v4-core/src/types/BeforeSwapDelta.sol": {
      "keccak256": "0x2a774312d91285313d569da1a718c909655da5432310417692097a1d4dc83a78",
      "urls": [
        "bzz-raw://a2c7a0379955cff9c17ab9e61f95e42909aa5947c22740f86ce940d09856f782",
        "dweb:/ipfs/QmaAuo8UBYXsGrVuKh8iRoAAdqwtg1jDq515cW1ZRP5m9K"
      ],
      "license": "MIT"
    },
    "node_modules/@uniswap/v4-core/src/types/Currency.sol": {
      "keccak256": "0x4a0b84b282577ff6f8acf13ec9f4d32dbb9348748b49611d00e68bee96609c93",
      "urls": [
        "bzz-raw://45f9d62ab3d51b52957279e353853ba1547c3182c9a1e3d1846ada4a90263b01",
        "dweb:/ipfs/QmS8NG84ccQS1yXVD8cv3eKX7J1UKxuJhbUfHTQR2opKF5"
      ],
      "license": "MIT"
    },
    "node_modules/@uniswap/v4-core/src/types/PoolId.sol": {
      "keccak256": "0x308311916ea0f5c2fd878b6a2751eb223d170a69e33f601fae56dfe3c5d392af",
      "urls": [
        "bzz-raw://669c2cd7ac17690b5d8831e0bda72822376c3a04b36afed6d31df4d75fe60918",
        "dweb:/ipfs/QmT6EpkxqU8VF3WsgrZ66F3s1cCQRffR95z1HDYZz7ph6y"
      ],
      "license": "MIT"
    },
    "node_modules/@uniswap/v4-core/src/types/PoolKey.sol": {
      "keccak256": "0xf89856e0580d7a4856d3187a76858377ccee9d59702d230c338d84388221b786",
      "urls": [
        "bzz-raw://6f3118fa189025695c37fdf0bdd1190f085ad097484d3c88cf4c56d1db65f639",
        "dweb:/ipfs/QmamXpgtB8GV1CaFLvqefPWSoikLDhMk1yU4heBnVzU8gi"
      ],
      "license": "MIT"
    },
    "node_modules/@uniswap/v4-core/src/types/PoolOperation.sol": {
      "keccak256": "0x7a1a107fc1f2208abb2c9364c8c54e56e98dca27673e9441bed2b949b6382162",
      "urls": [
        "bzz-raw://4ad2470383bc5595d5af17840c64971f457adac68895a4db41ba5c71a4478e07",
        "dweb:/ipfs/QmdwKhBHDZFuqXrR2BfDBD9r7rB2ULGQBznsajRTkTmL4c"
      ],
      "license": "MIT"
    },
    "node_modules/@uniswap/v4-periphery/src/base/ImmutableState.sol": {
      "keccak256": "0x1867c9fa2f9b4fa73bab0fcdc9d19ccef4eeac552273d8b84a170cd1cc90350a",
      "urls": [
        "bzz-raw://af2d699b439e13b599632fddfe82718aebd41055fba7c075f186675c588d1337",
        "dweb:/ipfs/Qmc111gckSKb9aESn3wRFLeLiS4KGujaUcaYJgRnCRfwQU"
      ],
      "license": "MIT"
    },
    "node_modules/@uniswap/v4-periphery/src/interfaces/IImmutableState.sol": {
      "keccak256": "0x36ab3100e87457ecf04887f4f540e34fd7f21d8e3b83880cb679239e60b7b06b",
      "urls": [
        "bzz-raw://7f290c7ce8e4832608d637a51b13dff95abecf6549485448e647a11c8ed01341",
        "dweb:/ipfs/QmfD1R6mTp8j4EjQXmQZW3vCh11EYFjnvoaw8rXRP27mMq"
      ],
      "license": "MIT"
    },
    "node_modules/@uniswap/v4-periphery/src/utils/BaseHook.sol": {
      "keccak256": "0x6268607345149d912996d1c2bac693b2102304cc97c19ec4fef184d6fa390e89",
      "urls": [
        "bzz-raw://d6c0dddffa6c5eb3c10bc45d56d58bc3f4773778322fa10a4acf46e2292b61b3",
        "dweb:/ipfs/Qmc1Srhh6ne5Lsi2Y5BBz8pgPLmJdg8uN1UCeJzKnr6Kra"
      ],
      "license": "MIT"
    },
    "src/PhantomPortfolio.sol": {
      "keccak256": "0xdb18b0b59bd94ea25cfa5ee4bf8d58728181bfce79bcf1b6d01c06c0657ae4e4",
      "urls": [
        "bzz-raw://1381355ed3d5b8f5edfd726e6a768a7ef82678a87723b2791610a2c1f5a5d765",
        "dweb:/ipfs/QmUJyZsm4QTZyrQQMVyfZsjDFgocxAxvnWD4qaLV5asia7"
      ],
      "license": "MIT"
    },
    "src/lib/PortfolioFHEPermissions.sol": {
      "keccak256": "0xf584eec1a7d6486fcc0ff9d779554c50d9db39ae478d80d3fd08982040042634",
      "urls": [
        "bzz-raw://7a416bc19c9c8cef1692e4057d78d019f7b0690c95b8dc2709f1d5cb55923446",
        "dweb:/ipfs/QmViVmfMc9y3UY1qAatU3kRY9D3bn2TRjD5e1JMRWqL7GF"
      ],
      "license": "MIT"
    },
    "src/lib/PortfolioLibrary.sol": {
      "keccak256": "0x325fe003350f7cf9397316d96f373bd4ee9dbfeb5790ebed84fae620ad7812d2",
      "urls": [
        "bzz-raw://f9ebee935c4f16e9364c43c8d35542cf61647774738d6d112e4fe17add2c42ce",
        "dweb:/ipfs/QmSLmEXk3zGR5gzZTAJtKYRXY2uKZity8vKmEuu11nE9Hg"
      ],
      "license": "MIT"
    }
  },
  "version": 1
}