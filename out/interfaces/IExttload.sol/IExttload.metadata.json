{
  "compiler": {
    "version": "0.8.26+commit.8a97fa7a"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [
          {
            "internalType": "bytes32[]",
            "name": "slots",
            "type": "bytes32[]"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "exttload",
        "outputs": [
          {
            "internalType": "bytes32[]",
            "name": "values",
            "type": "bytes32[]"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "slot",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "exttload",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "value",
            "type": "bytes32"
          }
        ]
      }
    ],
    "devdoc": {
      "kind": "dev",
      "methods": {
        "exttload(bytes32)": {
          "params": {
            "slot": "Key of slot to tload"
          },
          "returns": {
            "value": "The value of the slot as bytes32"
          }
        },
        "exttload(bytes32[])": {
          "params": {
            "slots": "List of slots to tload"
          },
          "returns": {
            "values": "List of loaded values"
          }
        }
      },
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "exttload(bytes32)": {
          "notice": "Called by external contracts to access transient storage of the contract"
        },
        "exttload(bytes32[])": {
          "notice": "Called by external contracts to access sparse transient pool state"
        }
      },
      "version": 1
    }
  },
  "settings": {
    "remappings": [
      "@fhenixprotocol/cofhe-contracts/=node_modules/@fhenixprotocol/cofhe-contracts/",
      "@fhenixprotocol/cofhe-mock-contracts/=node_modules/@fhenixprotocol/cofhe-mock-contracts/",
      "@openzeppelin/contracts-upgradeable/=node_modules/@openzeppelin/contracts-upgradeable/",
      "@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/",
      "@uniswap/v4-core/=node_modules/@uniswap/v4-core/",
      "ds-test/=node_modules/@uniswap/v4-core/lib/solmate/lib/ds-test/",
      "erc4626-tests/=node_modules/@uniswap/v4-core/lib/openzeppelin-contracts/lib/erc4626-tests/",
      "forge-gas-snapshot/=node_modules/@uniswap/v4-periphery/lib/permit2/lib/forge-gas-snapshot/",
      "forge-std/=node_modules/forge-std/src/",
      "hardhat/=node_modules/hardhat/",
      "openzeppelin-contracts/=node_modules/@uniswap/v4-core/lib/openzeppelin-contracts/",
      "permit2/=node_modules/@uniswap/v4-periphery/lib/permit2/",
      "solmate/=node_modules/@uniswap/v4-core/lib/solmate/",
      "v4-core/=node_modules/@uniswap/v4-periphery/lib/v4-core/",
      "v4-periphery/=node_modules/@uniswap/v4-periphery/"
    ],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "metadata": {
      "bytecodeHash": "ipfs"
    },
    "compilationTarget": {
      "node_modules/@uniswap/v4-periphery/lib/v4-core/src/interfaces/IExttload.sol": "IExttload"
    },
    "evmVersion": "cancun",
    "libraries": {},
    "viaIR": true
  },
  "sources": {
    "node_modules/@uniswap/v4-periphery/lib/v4-core/src/interfaces/IExttload.sol": {
      "keccak256": "0xc6b68283ebd8d1c789df536756726eed51c589134bb20821b236a0d22a135937",
      "urls": [
        "bzz-raw://294394f72dfc219689209f4130d85601dfd0d63c8d47578050d312db70f9b6c8",
        "dweb:/ipfs/QmTDMQ3oxCGHgEBU48a3Lp4S1rRjc8vVCxkhE5ZNej1bsY"
      ],
      "license": "MIT"
    }
  },
  "version": 1
}