{
  "compiler": {
    "version": "0.8.26+commit.8a97fa7a"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "initialOwner",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "constructor"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "AlreadyDelegated"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "sender",
            "type": "address"
          }
        ],
        "type": "error",
        "name": "DirectAllowForbidden"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "InvalidShortString"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "owner",
            "type": "address"
          }
        ],
        "type": "error",
        "name": "OwnableInvalidOwner"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "type": "error",
        "name": "OwnableUnauthorizedAccount"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "PermissionInvalid_Disabled"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "PermissionInvalid_Expired"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "PermissionInvalid_IssuerSignature"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "PermissionInvalid_RecipientSignature"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "SenderCannotBeDelegateeAddress"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "sender",
            "type": "address"
          }
        ],
        "type": "error",
        "name": "SenderNotAllowed"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "str",
            "type": "string"
          }
        ],
        "type": "error",
        "name": "StringTooLong"
      },
      {
        "inputs": [
          {
            "internalType": "uint256[]",
            "name": "handlesList",
            "type": "uint256[]",
            "indexed": false
          }
        ],
        "type": "event",
        "name": "AllowedForDecryption",
        "anonymous": false
      },
      {
        "inputs": [],
        "type": "event",
        "name": "EIP712DomainChanged",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "sender",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "address",
            "name": "delegatee",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "address",
            "name": "contractAddress",
            "type": "address",
            "indexed": true
          }
        ],
        "type": "event",
        "name": "NewDelegation",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "previousOwner",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "address",
            "name": "newOwner",
            "type": "address",
            "indexed": true
          }
        ],
        "type": "event",
        "name": "OwnershipTransferStarted",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "previousOwner",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "address",
            "name": "newOwner",
            "type": "address",
            "indexed": true
          }
        ],
        "type": "event",
        "name": "OwnershipTransferred",
        "anonymous": false
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "TASK_MANAGER_ADDRESS_",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "acceptOwnership"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "handle",
            "type": "uint256"
          },
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "requester",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "allow"
      },
      {
        "inputs": [
          {
            "internalType": "uint256[]",
            "name": "handlesList",
            "type": "uint256[]"
          },
          {
            "internalType": "address",
            "name": "requester",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "allowForDecryption"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "handle",
            "type": "uint256"
          },
          {
            "internalType": "address",
            "name": "requester",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "allowGlobal"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "handle",
            "type": "uint256"
          },
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "requester",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "allowTransient"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "delegatee",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "handle",
            "type": "uint256"
          },
          {
            "internalType": "address",
            "name": "contractAddress",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "allowedOnBehalf",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "handle",
            "type": "uint256"
          },
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "allowedTransient",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "cleanTransientStorage"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "delegatee",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "delegateeContract",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "delegateAccount"
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "eip712Domain",
        "outputs": [
          {
            "internalType": "bytes1",
            "name": "fields",
            "type": "bytes1"
          },
          {
            "internalType": "string",
            "name": "name",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "version",
            "type": "string"
          },
          {
            "internalType": "uint256",
            "name": "chainId",
            "type": "uint256"
          },
          {
            "internalType": "address",
            "name": "verifyingContract",
            "type": "address"
          },
          {
            "internalType": "bytes32",
            "name": "salt",
            "type": "bytes32"
          },
          {
            "internalType": "uint256[]",
            "name": "extensions",
            "type": "uint256[]"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "pure",
        "type": "function",
        "name": "exists",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "getTaskManagerAddress",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "pure",
        "type": "function",
        "name": "getVersion",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "handle",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "globalAllowed",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "structHash",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "hashTypedDataV4",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "handle",
            "type": "uint256"
          },
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "isAllowed",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "handle",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "isAllowedForDecryption",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "struct Permission",
            "name": "permission",
            "type": "tuple",
            "components": [
              {
                "internalType": "address",
                "name": "issuer",
                "type": "address"
              },
              {
                "internalType": "uint64",
                "name": "expiration",
                "type": "uint64"
              },
              {
                "internalType": "address",
                "name": "recipient",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "validatorId",
                "type": "uint256"
              },
              {
                "internalType": "address",
                "name": "validatorContract",
                "type": "address"
              },
              {
                "internalType": "bytes32",
                "name": "sealingKey",
                "type": "bytes32"
              },
              {
                "internalType": "bytes",
                "name": "issuerSignature",
                "type": "bytes"
              },
              {
                "internalType": "bytes",
                "name": "recipientSignature",
                "type": "bytes"
              }
            ]
          },
          {
            "internalType": "uint256",
            "name": "handle",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "isAllowedWithPermission",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "owner",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "pendingOwner",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "handle",
            "type": "uint256"
          },
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "persistAllowed",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "renounceOwnership"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "newOwner",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "transferOwnership"
      }
    ],
    "devdoc": {
      "kind": "dev",
      "methods": {
        "acceptOwnership()": {
          "details": "The new owner accepts the ownership transfer."
        },
        "allow(uint256,address,address)": {
          "details": "The caller must be allowed to use `handle` for allow() to succeed. If not, allow() reverts.",
          "params": {
            "account": "Address of the account being given permissions.",
            "handle": "Handle.",
            "requester": "Address of the account giving the permissions."
          }
        },
        "allowForDecryption(uint256[],address)": {
          "params": {
            "handlesList": "List of handles."
          }
        },
        "allowGlobal(uint256,address)": {
          "details": "The caller must be allowed to use `handle` for allowGlobal() to succeed. If not, allowGlobal() reverts.",
          "params": {
            "handle": "Handle.",
            "requester": "Address of the account giving the permissions."
          }
        },
        "allowTransient(uint256,address,address)": {
          "details": "The caller must be the Task Manager contract.The requester must be allowed to use `handle` for allowTransient() to succeed.                      If not, allowTransient() reverts.",
          "params": {
            "account": "Address of the account.",
            "handle": "Handle.",
            "requester": "Address of the requester."
          }
        },
        "allowedOnBehalf(address,uint256,address,address)": {
          "params": {
            "account": "Address of the account.",
            "contractAddress": "Contract address.",
            "delegatee": "Delegatee address.",
            "handle": "Handle."
          },
          "returns": {
            "_0": "isAllowed        Whether the handle can be accessed."
          }
        },
        "allowedTransient(uint256,address)": {
          "params": {
            "account": "Address of the account.",
            "handle": "Handle."
          },
          "returns": {
            "_0": "isAllowedTransient   Whether the account can access transiently the handle."
          }
        },
        "cleanTransientStorage()": {
          "details": "This function removes the transient allowances, which could be useful for integration with      Account Abstraction when bundling several UserOps calling the TaskManagerCoprocessor."
        },
        "constructor": {
          "custom:oz-upgrades-unsafe-allow": "constructor"
        },
        "delegateAccount(address,address)": {
          "params": {
            "delegatee": "Delegatee address.",
            "delegateeContract": "Delegatee contract."
          }
        },
        "eip712Domain()": {
          "details": "returns the fields and values that describe the domain separator used by this contract for EIP-712 signature."
        },
        "getTaskManagerAddress()": {
          "returns": {
            "_0": "taskManagerAddress  Address of the TaskManager."
          }
        },
        "getVersion()": {
          "returns": {
            "_0": "string Name and the version of the contract."
          }
        },
        "globalAllowed(uint256)": {
          "params": {
            "handle": "Handle."
          },
          "returns": {
            "_0": "isAllowed    Whether the handle is allowed globally."
          }
        },
        "isAllowed(uint256,address)": {
          "params": {
            "account": "Address of the account.",
            "handle": "Handle."
          },
          "returns": {
            "_0": "isAllowed    Whether the account can access the handle."
          }
        },
        "isAllowedForDecryption(uint256)": {
          "params": {
            "handle": "Handle."
          },
          "returns": {
            "_0": "isAllowed    Whether the handle is allowed for decryption."
          }
        },
        "owner()": {
          "details": "Returns the address of the current owner."
        },
        "pendingOwner()": {
          "details": "Returns the address of the pending owner."
        },
        "persistAllowed(uint256,address)": {
          "params": {
            "account": "Address of the account.",
            "handle": "Handle."
          },
          "returns": {
            "_0": "isAllowed    Whether the account can access the handle."
          }
        },
        "renounceOwnership()": {
          "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
        },
        "transferOwnership(address)": {
          "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner. Setting `newOwner` to the zero address is allowed; this can be used to cancel an initiated ownership transfer."
        }
      },
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "TASK_MANAGER_ADDRESS_()": {
          "notice": "TaskManagerAddress address."
        },
        "allow(uint256,address,address)": {
          "notice": "Allows the use of `handle` for the address `account`."
        },
        "allowForDecryption(uint256[],address)": {
          "notice": "Allows a list of handles to be decrypted."
        },
        "allowGlobal(uint256,address)": {
          "notice": "Allows the use of `handle` globally (all accounts)."
        },
        "allowTransient(uint256,address,address)": {
          "notice": "Allows the use of `handle` by address `account` for this transaction."
        },
        "allowedOnBehalf(address,uint256,address,address)": {
          "notice": "Returns whether the delegatee is allowed to access the handle."
        },
        "allowedTransient(uint256,address)": {
          "notice": "Checks whether the account is allowed to use the handle in the                              same transaction (transient)."
        },
        "delegateAccount(address,address)": {
          "notice": "Delegates the access of `handles` in the context of account abstraction for issuing                          reencryption requests from a smart contract account."
        },
        "getTaskManagerAddress()": {
          "notice": "Getter function for the TaskManager contract address."
        },
        "getVersion()": {
          "notice": "Getter for the name and version of the contract."
        },
        "globalAllowed(uint256)": {
          "notice": "Returns `true` if the handle is allowed globally."
        },
        "isAllowed(uint256,address)": {
          "notice": "Returns whether the account is allowed to use the `handle`, either due to                      allowTransient() or allow()."
        },
        "isAllowedForDecryption(uint256)": {
          "notice": "Checks whether a handle is allowed for decryption."
        },
        "persistAllowed(uint256,address)": {
          "notice": "Returns `true` if address `a` is allowed to use `c` and `false` otherwise."
        }
      },
      "version": 1
    }
  },
  "settings": {
    "remappings": [
      "@fhenixprotocol/cofhe-contracts/=node_modules/@fhenixprotocol/cofhe-contracts/",
      "@fhenixprotocol/cofhe-mock-contracts/=node_modules/@fhenixprotocol/cofhe-mock-contracts/",
      "@openzeppelin/contracts-upgradeable/=node_modules/@openzeppelin/contracts-upgradeable/",
      "@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/",
      "@uniswap/v4-core/=node_modules/@uniswap/v4-core/",
      "ds-test/=node_modules/@uniswap/v4-core/lib/solmate/lib/ds-test/",
      "erc4626-tests/=node_modules/@uniswap/v4-core/lib/openzeppelin-contracts/lib/erc4626-tests/",
      "forge-gas-snapshot/=node_modules/@uniswap/v4-periphery/lib/permit2/lib/forge-gas-snapshot/",
      "forge-std/=node_modules/forge-std/src/",
      "hardhat/=node_modules/hardhat/",
      "openzeppelin-contracts/=node_modules/@uniswap/v4-core/lib/openzeppelin-contracts/",
      "permit2/=node_modules/@uniswap/v4-periphery/lib/permit2/",
      "solmate/=node_modules/@uniswap/v4-core/lib/solmate/",
      "v4-core/=node_modules/@uniswap/v4-periphery/lib/v4-core/",
      "v4-periphery/=node_modules/@uniswap/v4-periphery/"
    ],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "metadata": {
      "bytecodeHash": "ipfs"
    },
    "compilationTarget": {
      "node_modules/@fhenixprotocol/cofhe-mock-contracts/ACL.sol": "ACL"
    },
    "evmVersion": "cancun",
    "libraries": {},
    "viaIR": true
  },
  "sources": {
    "node_modules/@fhenixprotocol/cofhe-contracts/FHE.sol": {
      "keccak256": "0x1ef83b66db01d3252557ae8b22553920966b864e9de79134039a80368eaae573",
      "urls": [
        "bzz-raw://5ceadf3ed2378689c9b806b87fa56ce2a8774ecf693678150bcd558fb71b5be7",
        "dweb:/ipfs/QmNeW41QYyYnCYephhamCkE1aem3HVTHxpao7JbA2ABTjs"
      ],
      "license": "BSD-3-Clause-Clear"
    },
    "node_modules/@fhenixprotocol/cofhe-contracts/ICofhe.sol": {
      "keccak256": "0x4f1bb532cd152e124638f5957ee43848d82a34df1c540c5dbf99ea72359e2db3",
      "urls": [
        "bzz-raw://260aa7d6c664aa4c5b7f6760de4de6c206a17a5fcde784c171459e9bd0850696",
        "dweb:/ipfs/QmQKqbPJvR4ced1SJGzCtgohEbzi7oRgHBqNDLLvxPVKvJ"
      ],
      "license": "UNLICENSED"
    },
    "node_modules/@fhenixprotocol/cofhe-mock-contracts/ACL.sol": {
      "keccak256": "0x02727fe4c3ce4b04f7d95e42f97da4476f49f5bf76986e8ab4b420ec5ab48729",
      "urls": [
        "bzz-raw://79763fdb12cd475881290d89968e606c7cb6fd40ca2e12b0afe9330cdf9f9794",
        "dweb:/ipfs/QmY8XLSQc1jyWNii81Tj34vdYcVpZjZU8Hqq5gBb2kqwzV"
      ],
      "license": "BSD-3-Clause-Clear"
    },
    "node_modules/@fhenixprotocol/cofhe-mock-contracts/Permissioned.sol": {
      "keccak256": "0x2a9dcdbe1373efc447b5a46b671a5b73becc8ae908e9a346f72142c2c73a5e2e",
      "urls": [
        "bzz-raw://8d711b39f2291a506e0bdbccb84479c5d8eccd0b121ff3219576bd263ec04641",
        "dweb:/ipfs/QmfJUnpLsahxdCV5pmGCBBp6CtGadwa8Jcvm75LrwQcP8s"
      ],
      "license": "MIT"
    },
    "node_modules/@openzeppelin/contracts/access/Ownable.sol": {
      "keccak256": "0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb",
      "urls": [
        "bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6",
        "dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a"
      ],
      "license": "MIT"
    },
    "node_modules/@openzeppelin/contracts/access/Ownable2Step.sol": {
      "keccak256": "0xdcad8898fda432696597752e8ec361b87d85c82cb258115427af006dacf7128c",
      "urls": [
        "bzz-raw://e2c9d517f0c136d54bd00cd57959d25681d4d6273f5bbbc263afe228303772f0",
        "dweb:/ipfs/QmReNFjXBiufByiAAzfSQ2SM5r3qeUErn46BmN3yVRvrek"
      ],
      "license": "MIT"
    },
    "node_modules/@openzeppelin/contracts/interfaces/IERC1271.sol": {
      "keccak256": "0x66c7ec42c6c43712be2107a50ab4529379bc76a632b425babec698d9da921ac6",
      "urls": [
        "bzz-raw://dce2778f0b638adfc5ba29c2c618c855fe725fa74a16846386aa1d56a834aa04",
        "dweb:/ipfs/QmPV9oWnzQdi58od266j62xvviavLNHqKLZfm6k2K1qy9E"
      ],
      "license": "MIT"
    },
    "node_modules/@openzeppelin/contracts/interfaces/IERC5267.sol": {
      "keccak256": "0xfb223a85dd0b2175cfbbaa325a744e2cd74ecd17c3df2b77b0722f991d2725ee",
      "urls": [
        "bzz-raw://84bf1dea0589ec49c8d15d559cc6d86ee493048a89b2d4adb60fbe705a3d89ae",
        "dweb:/ipfs/Qmd56n556d529wk2pRMhYhm5nhMDhviwereodDikjs68w1"
      ],
      "license": "MIT"
    },
    "node_modules/@openzeppelin/contracts/interfaces/IERC7913.sol": {
      "keccak256": "0xe5a126930df1d54e4a6dd5fea09010c4a7db0ea974c6c17a1e6082879f5a032b",
      "urls": [
        "bzz-raw://2f58f5a90328536a6c68289916bfa4ed653d871319c7b2a416ab3f6263c4f2f5",
        "dweb:/ipfs/Qmaa9DmgUA16Urz5fuF4RbFz2NaVpNLV41ddwykSdasFUd"
      ],
      "license": "MIT"
    },
    "node_modules/@openzeppelin/contracts/utils/Bytes.sol": {
      "keccak256": "0x1613f93e376ab96791fd29f79da754e253c3d766831bc8c42f50545662f49065",
      "urls": [
        "bzz-raw://e88ee314d50d0f323616f88d0ccf5e4110dbdec2775d8d42523bcc8b76ed36eb",
        "dweb:/ipfs/QmQ18ygHRrDdz4AEZXy5PASUHvJk1SNWWKM3TyC1xvDedP"
      ],
      "license": "MIT"
    },
    "node_modules/@openzeppelin/contracts/utils/Context.sol": {
      "keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
      "urls": [
        "bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
        "dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
      ],
      "license": "MIT"
    },
    "node_modules/@openzeppelin/contracts/utils/Panic.sol": {
      "keccak256": "0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a",
      "urls": [
        "bzz-raw://c6a5ff4f9fd8649b7ee20800b7fa387d3465bd77cf20c2d1068cd5c98e1ed57a",
        "dweb:/ipfs/QmVSaVJf9FXFhdYEYeCEfjMVHrxDh5qL4CGkxdMWpQCrqG"
      ],
      "license": "MIT"
    },
    "node_modules/@openzeppelin/contracts/utils/ShortStrings.sol": {
      "keccak256": "0x1fcf8cceb1a67e6c8512267e780933c4a3f63ef44756e6c818fda79be51c8402",
      "urls": [
        "bzz-raw://617d7d57f6f9cd449068b4d23daf485676d083aae648e038d05eb3a13291de35",
        "dweb:/ipfs/QmPADWPiGaSzZDFNpFEUx4ZPqhzPkYncBpHyTfAGcfsqzy"
      ],
      "license": "MIT"
    },
    "node_modules/@openzeppelin/contracts/utils/StorageSlot.sol": {
      "keccak256": "0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97",
      "urls": [
        "bzz-raw://9f660b1f351b757dfe01438e59888f31f33ded3afcf5cb5b0d9bf9aa6f320a8b",
        "dweb:/ipfs/QmarDJ5hZEgBtCmmrVzEZWjub9769eD686jmzb2XpSU1cM"
      ],
      "license": "MIT"
    },
    "node_modules/@openzeppelin/contracts/utils/Strings.sol": {
      "keccak256": "0xad148d59f05165f9217d0a9e1ac8f772abb02ea6aaad8a756315c532bf79f9f4",
      "urls": [
        "bzz-raw://15e3599867c2182f5831e9268b274b2ef2047825837df6b4d81c9e89254b093e",
        "dweb:/ipfs/QmZbL7XAYr5RmaNaooPgZRmcDXaudfsYQfYD9y5iAECvpS"
      ],
      "license": "MIT"
    },
    "node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "keccak256": "0x69f54c02b7d81d505910ec198c11ed4c6a728418a868b906b4a0cf29946fda84",
      "urls": [
        "bzz-raw://8e25e4bdb7ae1f21d23bfee996e22736fc0ab44cfabedac82a757b1edc5623b9",
        "dweb:/ipfs/QmQdWQvB6JCP9ZMbzi8EvQ1PTETqkcTWrbcVurS7DKpa5n"
      ],
      "license": "MIT"
    },
    "node_modules/@openzeppelin/contracts/utils/cryptography/EIP712.sol": {
      "keccak256": "0x17fc4574e07105b0180ef61f1b3cacd1820a3d37f29a4af1018d0a253c6399b5",
      "urls": [
        "bzz-raw://be46b3e1362dbcadbbb45ec92cdea849dceccea3e2795237f00c123aeae44746",
        "dweb:/ipfs/QmSpyB8mud6xKiZaQnVtEPrxtTHGtyBgjs1PCYk4f2gesd"
      ],
      "license": "MIT"
    },
    "node_modules/@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol": {
      "keccak256": "0x26670fef37d4adf55570ba78815eec5f31cb017e708f61886add4fc4da665631",
      "urls": [
        "bzz-raw://b16d45febff462bafd8a5669f904796a835baf607df58a8461916d3bf4f08c59",
        "dweb:/ipfs/QmU2eJFpjmT4vxeJWJyLeQb8Xht1kdB8Y6MKLDPFA9WPux"
      ],
      "license": "MIT"
    },
    "node_modules/@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol": {
      "keccak256": "0x0f39d23ae345355f0913470b15d00c0434754302077ac97cdc038b5c000fc5cc",
      "urls": [
        "bzz-raw://d5ebc3233ff506c43e0f9960d2459403f878bbb63b7c71c318f16839564919ac",
        "dweb:/ipfs/QmbctngFd6aQkHVqZeFAL3iHfw4X7wNgfsgUxX8t26U2m4"
      ],
      "license": "MIT"
    },
    "node_modules/@openzeppelin/contracts/utils/math/Math.sol": {
      "keccak256": "0x1225214420c83ebcca88f2ae2b50f053aaa7df7bd684c3e878d334627f2edfc6",
      "urls": [
        "bzz-raw://6c5fab4970634f9ab9a620983dc1c8a30153981a0b1a521666e269d0a11399d3",
        "dweb:/ipfs/QmVRnBC575MESGkEHndjujtR7qub2FzU9RWy9eKLp4hPZB"
      ],
      "license": "MIT"
    },
    "node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol": {
      "keccak256": "0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54",
      "urls": [
        "bzz-raw://b1d578337048cad08c1c03041cca5978eff5428aa130c781b271ad9e5566e1f8",
        "dweb:/ipfs/QmPFKL2r9CBsMwmUqqdcFPfHZB2qcs9g1HDrPxzWSxomvy"
      ],
      "license": "MIT"
    },
    "node_modules/@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "keccak256": "0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3",
      "urls": [
        "bzz-raw://db5fbb3dddd8b7047465b62575d96231ba8a2774d37fb4737fbf23340fabbb03",
        "dweb:/ipfs/QmVUSvooZKEdEdap619tcJjTLcAuH6QBdZqAzWwnAXZAWJ"
      ],
      "license": "MIT"
    }
  },
  "version": 1
}