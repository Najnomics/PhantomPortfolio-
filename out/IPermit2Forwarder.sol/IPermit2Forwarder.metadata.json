{
  "compiler": {
    "version": "0.8.26+commit.8a97fa7a"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "owner",
            "type": "address"
          },
          {
            "internalType": "struct IAllowanceTransfer.PermitSingle",
            "name": "permitSingle",
            "type": "tuple",
            "components": [
              {
                "internalType": "struct IAllowanceTransfer.PermitDetails",
                "name": "details",
                "type": "tuple",
                "components": [
                  {
                    "internalType": "address",
                    "name": "token",
                    "type": "address"
                  },
                  {
                    "internalType": "uint160",
                    "name": "amount",
                    "type": "uint160"
                  },
                  {
                    "internalType": "uint48",
                    "name": "expiration",
                    "type": "uint48"
                  },
                  {
                    "internalType": "uint48",
                    "name": "nonce",
                    "type": "uint48"
                  }
                ]
              },
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "sigDeadline",
                "type": "uint256"
              }
            ]
          },
          {
            "internalType": "bytes",
            "name": "signature",
            "type": "bytes"
          }
        ],
        "stateMutability": "payable",
        "type": "function",
        "name": "permit",
        "outputs": [
          {
            "internalType": "bytes",
            "name": "err",
            "type": "bytes"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "owner",
            "type": "address"
          },
          {
            "internalType": "struct IAllowanceTransfer.PermitBatch",
            "name": "_permitBatch",
            "type": "tuple",
            "components": [
              {
                "internalType": "struct IAllowanceTransfer.PermitDetails[]",
                "name": "details",
                "type": "tuple[]",
                "components": [
                  {
                    "internalType": "address",
                    "name": "token",
                    "type": "address"
                  },
                  {
                    "internalType": "uint160",
                    "name": "amount",
                    "type": "uint160"
                  },
                  {
                    "internalType": "uint48",
                    "name": "expiration",
                    "type": "uint48"
                  },
                  {
                    "internalType": "uint48",
                    "name": "nonce",
                    "type": "uint48"
                  }
                ]
              },
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "sigDeadline",
                "type": "uint256"
              }
            ]
          },
          {
            "internalType": "bytes",
            "name": "signature",
            "type": "bytes"
          }
        ],
        "stateMutability": "payable",
        "type": "function",
        "name": "permitBatch",
        "outputs": [
          {
            "internalType": "bytes",
            "name": "err",
            "type": "bytes"
          }
        ]
      }
    ],
    "devdoc": {
      "kind": "dev",
      "methods": {
        "permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)": {
          "details": "this function is payable to allow multicall with NATIVE based actions",
          "params": {
            "owner": "the owner of the tokens",
            "permitSingle": "the permit data",
            "signature": "the signature of the permit; abi.encodePacked(r, s, v)"
          },
          "returns": {
            "err": "the error returned by a reverting permit call, empty if successful"
          }
        },
        "permitBatch(address,((address,uint160,uint48,uint48)[],address,uint256),bytes)": {
          "details": "this function is payable to allow multicall with NATIVE based actions",
          "params": {
            "_permitBatch": "a batch of approvals",
            "owner": "the owner of the tokens",
            "signature": "the signature of the permit; abi.encodePacked(r, s, v)"
          },
          "returns": {
            "err": "the error returned by a reverting permit call, empty if successful"
          }
        }
      },
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)": {
          "notice": "allows forwarding a single permit to permit2"
        },
        "permitBatch(address,((address,uint160,uint48,uint48)[],address,uint256),bytes)": {
          "notice": "allows forwarding batch permits to permit2"
        }
      },
      "version": 1
    }
  },
  "settings": {
    "remappings": [
      "@fhenixprotocol/cofhe-contracts/=node_modules/@fhenixprotocol/cofhe-contracts/",
      "@fhenixprotocol/cofhe-mock-contracts/=node_modules/@fhenixprotocol/cofhe-mock-contracts/",
      "@openzeppelin/contracts-upgradeable/=node_modules/@openzeppelin/contracts-upgradeable/",
      "@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/",
      "@uniswap/v4-core/=node_modules/@uniswap/v4-core/",
      "ds-test/=node_modules/@uniswap/v4-core/lib/solmate/lib/ds-test/",
      "erc4626-tests/=node_modules/@uniswap/v4-core/lib/openzeppelin-contracts/lib/erc4626-tests/",
      "forge-gas-snapshot/=node_modules/@uniswap/v4-periphery/lib/permit2/lib/forge-gas-snapshot/",
      "forge-std/=node_modules/forge-std/src/",
      "hardhat/=node_modules/hardhat/",
      "openzeppelin-contracts/=node_modules/@uniswap/v4-core/lib/openzeppelin-contracts/",
      "permit2/=node_modules/@uniswap/v4-periphery/lib/permit2/",
      "solmate/=node_modules/@uniswap/v4-core/lib/solmate/",
      "v4-core/=node_modules/@uniswap/v4-periphery/lib/v4-core/",
      "v4-periphery/=node_modules/@uniswap/v4-periphery/"
    ],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "metadata": {
      "bytecodeHash": "ipfs"
    },
    "compilationTarget": {
      "node_modules/@uniswap/v4-periphery/src/interfaces/IPermit2Forwarder.sol": "IPermit2Forwarder"
    },
    "evmVersion": "cancun",
    "libraries": {},
    "viaIR": true
  },
  "sources": {
    "node_modules/@uniswap/v4-periphery/lib/permit2/src/interfaces/IAllowanceTransfer.sol": {
      "keccak256": "0x37f0ac203b6ef605c9533e1a739477e8e9dcea90710b40e645a367f8a21ace29",
      "urls": [
        "bzz-raw://e0104d72aeaec1cd66cc232e7de7b7ead08608efcc179491b8a66387614670b0",
        "dweb:/ipfs/QmfAZDyuNC9FXXbnJUwqHNwmAK6uRrXxtWEytLsxjskPsN"
      ],
      "license": "MIT"
    },
    "node_modules/@uniswap/v4-periphery/lib/permit2/src/interfaces/IEIP712.sol": {
      "keccak256": "0xfdccf2b9639070803cd0e4198427fb0df3cc452ca59bd3b8a0d957a9a4254138",
      "urls": [
        "bzz-raw://f7c936ac42ce89e827db905a1544397f8bdf46db34cdb6aa1b90dea42fdb4c72",
        "dweb:/ipfs/QmVgurxo1N31qZqkPBirw9Z7S9tLYmv6jSwQp8R8ur2cBk"
      ],
      "license": "MIT"
    },
    "node_modules/@uniswap/v4-periphery/src/interfaces/IPermit2Forwarder.sol": {
      "keccak256": "0xfad472937280e861125ff12aa6f9c2cf7440fbb20a2cc29485c24662ad4279c5",
      "urls": [
        "bzz-raw://31bfbc331f5972fc373d9469fd1ca1d14818db3275f21b7b590f20820cb4439d",
        "dweb:/ipfs/QmX3Bv9wfYpAFZKBcxKsQSXUrSC8mqNBdzh6XVMS72aNx9"
      ],
      "license": "MIT"
    }
  },
  "version": 1
}