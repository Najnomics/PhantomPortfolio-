{
  "compiler": {
    "version": "0.8.26+commit.8a97fa7a"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [],
        "type": "error",
        "name": "NoSelfPermit"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "SignatureDeadlineExpired"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "Unauthorized"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "spender",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "deadline",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "nonce",
            "type": "uint256"
          },
          {
            "internalType": "bytes",
            "name": "signature",
            "type": "bytes"
          }
        ],
        "stateMutability": "payable",
        "type": "function",
        "name": "permit"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "owner",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "operator",
            "type": "address"
          },
          {
            "internalType": "bool",
            "name": "approved",
            "type": "bool"
          },
          {
            "internalType": "uint256",
            "name": "deadline",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "nonce",
            "type": "uint256"
          },
          {
            "internalType": "bytes",
            "name": "signature",
            "type": "bytes"
          }
        ],
        "stateMutability": "payable",
        "type": "function",
        "name": "permitForAll"
      }
    ],
    "devdoc": {
      "kind": "dev",
      "methods": {
        "permit(address,uint256,uint256,uint256,bytes)": {
          "details": "payable so it can be multicalled with NATIVE related actions",
          "params": {
            "deadline": "The deadline timestamp by which the call must be mined for the approve to work",
            "nonce": "a unique value, for an owner, to prevent replay attacks; an unordered nonce where the top 248 bits correspond to a word and the bottom 8 bits calculate the bit position of the word",
            "signature": "Concatenated data from a valid secp256k1 signature from the holder, i.e. abi.encodePacked(r, s, v)",
            "spender": "The account that is being approved",
            "tokenId": "The ID of the token that is being approved for spending"
          }
        },
        "permitForAll(address,address,bool,uint256,uint256,bytes)": {
          "details": "payable so it can be multicalled with NATIVE related actions",
          "params": {
            "approved": "The permission to set on the operator",
            "deadline": "The deadline timestamp by which the call must be mined for the approve to work",
            "nonce": "a unique value, for an owner, to prevent replay attacks; an unordered nonce where the top 248 bits correspond to a word and the bottom 8 bits calculate the bit position of the word",
            "operator": "The address that will be set as an operator for the owner",
            "owner": "The address that is setting the operator",
            "signature": "Concatenated data from a valid secp256k1 signature from the holder, i.e. abi.encodePacked(r, s, v)"
          }
        }
      },
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "permit(address,uint256,uint256,uint256,bytes)": {
          "notice": "Approve of a specific token ID for spending by spender via signature"
        },
        "permitForAll(address,address,bool,uint256,uint256,bytes)": {
          "notice": "Set an operator with full permission to an owner's tokens via signature"
        }
      },
      "version": 1
    }
  },
  "settings": {
    "remappings": [
      "@fhenixprotocol/cofhe-contracts/=node_modules/@fhenixprotocol/cofhe-contracts/",
      "@fhenixprotocol/cofhe-mock-contracts/=node_modules/@fhenixprotocol/cofhe-mock-contracts/",
      "@openzeppelin/contracts-upgradeable/=node_modules/@openzeppelin/contracts-upgradeable/",
      "@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/",
      "@uniswap/v4-core/=node_modules/@uniswap/v4-core/",
      "ds-test/=node_modules/@uniswap/v4-core/lib/solmate/lib/ds-test/",
      "erc4626-tests/=node_modules/@uniswap/v4-core/lib/openzeppelin-contracts/lib/erc4626-tests/",
      "forge-gas-snapshot/=node_modules/@uniswap/v4-periphery/lib/permit2/lib/forge-gas-snapshot/",
      "forge-std/=node_modules/forge-std/src/",
      "hardhat/=node_modules/hardhat/",
      "openzeppelin-contracts/=node_modules/@uniswap/v4-core/lib/openzeppelin-contracts/",
      "permit2/=node_modules/@uniswap/v4-periphery/lib/permit2/",
      "solmate/=node_modules/@uniswap/v4-core/lib/solmate/",
      "v4-core/=node_modules/@uniswap/v4-periphery/lib/v4-core/",
      "v4-periphery/=node_modules/@uniswap/v4-periphery/"
    ],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "metadata": {
      "bytecodeHash": "ipfs"
    },
    "compilationTarget": {
      "node_modules/@uniswap/v4-periphery/src/interfaces/IERC721Permit_v4.sol": "IERC721Permit_v4"
    },
    "evmVersion": "cancun",
    "libraries": {},
    "viaIR": true
  },
  "sources": {
    "node_modules/@uniswap/v4-periphery/src/interfaces/IERC721Permit_v4.sol": {
      "keccak256": "0x103adbba724ef536abc536fe8a4d7dc12880724c562109b69f2adce4a91fa017",
      "urls": [
        "bzz-raw://06f51b5a5a218e0bc866a83e7821be53c9db9de0ca921f16abd3d13ea0eab69d",
        "dweb:/ipfs/QmbnhLy992hpQZyphTkj7fpr6jKKVva2AzfmLiDZEuqHAk"
      ],
      "license": "MIT"
    }
  },
  "version": 1
}